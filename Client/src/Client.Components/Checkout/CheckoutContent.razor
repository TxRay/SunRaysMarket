@using SunRaysMarket.Shared.Core.Payment
@using System.Runtime.InteropServices
@using SunRaysMarket.Client.Components.Checkout
@using SunRaysMarket.Shared.Core.Structs

@namespace SunRaysMarket.Client.Components
@rendermode InteractiveAuto

@if (ShouldLoadContent)
{
    <div class="checkout__content">
        <div class="checkout-column checkout__sections">
            <FulfilmentSection @bind-Model="Model.FulfillmentInfo"/>

            @{
                var showNext = Model.FulfillmentInfo is FulfillmentModel.NonEmptyModel
                               && PaymentModel is not null;
            }

            <PaymentSection @bind-PaymentMethodId="@Model.PaymentMethodId" ShowPaymentSection="@showNext"/>

            @{
                showNext = showNext && Model.PaymentMethodId is not null;
            }

            <ContactInfoSection @bind-ContactNumber="Model.ContactNumber" ShowSection="showNext"/>

            @{
                var showDeliveryInstructions = showNext && Model.FulfillmentInfo is FulfillmentModel.DeliveryModel;
            }

            <DeliveryInstructionsSection @bind-DeliveryInstructions="@Model.DeliveryInstructions"
                                         ShowSection="@showDeliveryInstructions"/>

        </div>

        @{
            var fulfillmentChargeType = Model.FulfillmentInfo switch
            {
                FulfillmentModel.DeliveryModel { IsValid: true } => "Delivery",
                FulfillmentModel.PickupModel { IsValid: true } => "Pickup",
                _ => null
            };
        }

        <CheckoutSummary Summary="@CostSummary" FulfilmentChargeType="@fulfillmentChargeType"/>

        <button class="btn btn--md btn--primary checkout__submit-btn" @onclick="OnSubmitAsync">Submit</button>
    </div>
}

@code {
#nullable disable
    [Inject] private ILogger<CheckoutContent> Logger { get; set; }
    [Inject] private ICheckoutService CheckoutService { get; set; }
    [Inject] private IServiceProvider ServiceProvider { get; set; }
#nullable enable

    [Parameter, EditorRequired] public CartSummaryModel Summary { get; set; } = default!;

    private bool ShouldLoadContent { get; set; }
    private CheckoutModel Model { get; set; } = new();
    private PaymentSection.PaymentMethodModel? PaymentModel { get; set; }
    private CheckoutCostSummary CostSummary { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        var store = ServiceProvider.GetService<IStore>();
        if (store is null) return;

        PaymentModel = await store.TryGetValueAsync<PaymentSection.PaymentMethodModel>("PaymentInfo")
                       ?? new PaymentSection.PaymentMethodModel();
        Model.PaymentMethodId = PaymentModel.PaymentMethodId;
        Model.FulfillmentInfo = await store.TryGetValueAsync<FulfillmentModel.DeliveryModel>("FulfillmentData")
                                ?? await store.TryGetValueAsync<FulfillmentModel.PickupModel>("FulfillmentData")
                                    as FulfillmentModel
                                ?? new FulfillmentModel.EmptyModel();
        Model.ContactNumber = await store.TryGetValueAsync<string>("ContactNumber");
        Model.DeliveryInstructions = await store.TryGetValueAsync<string>("DeliveryInstructions");

        CostSummary = new CheckoutCostSummary { ItemTotal = Summary.TotalPrice };

        ShouldLoadContent = true;
    }


    private async Task OnSubmitAsync()
    {
        try
        {
            await CheckoutService.CheckoutAsync(Model.ToSubmitModel());
        }
        catch
        {
            Logger.LogError("An error occured while the user was trying to checkout.");
        }
    }

    public record CheckoutCostSummary
    {
        public Price ItemTotal { get; init; }
        public Price FulfilmentCharge { get; init; }
        public Price GrandTotal => ItemTotal + FulfilmentCharge;
    }

}