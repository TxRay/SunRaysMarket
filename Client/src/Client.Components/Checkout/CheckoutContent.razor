@using SunRaysMarket.Shared.Core.Payment
@inherits OwningComponentBase<ICheckoutService>
@inject ILogger<CheckoutContent> Logger
@namespace SunRaysMarket.Client.Components
@rendermode InteractiveWebAssembly

@if (ShouldLoadContent)
{
    <div class="checkout__content">
        <div class="checkout-column checkout__sections">
            <CheckoutSection
                ShowSection="true"
                OnActionButtonClicked="OnFulfillmentActionBtnClicked">
                <Heading>
                    @if (Model.FulfillmentInfo is null)
                    {
                        @: Delivery or Pickup
                    }
                    else
                    {
                        switch (Model.FulfillmentInfo)
                        {
                            case FulfillmentModel.DeliveryModel:
                                @: Delivery
                                break;
                            case FulfillmentModel.PickupModel:
                                @: Pickup
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                </Heading>
                <ActionButton>
                    @if (Model.FulfillmentInfo is null)
                    {
                        @: Select time
                    }
                    else
                    {
                        @: Change time
                    }
                </ActionButton>
                <ChildContent>
                    @if (Model.FulfillmentInfo is null)
                    {
                        <span>Please select a pickup or delivery time.</span>
                    }
                    else
                    {
                        <div>
                            <span>@TimeSlotModel!.TimeSlotDefinition.TimeSlotRange.ToString()</span>
                        </div>
                    }
                </ChildContent>
            </CheckoutSection>

            <CheckoutSection ShowSection="@(Model.FulfillmentInfo is not null)">
                <Heading> Payment method</Heading>
                <ChildContent>
                    <EditForm EditContext="@PaymentMethodEditContext" FormName="PaymentMethodForm">
                        <div>
                            <InputCheckoutOptionGroup TValue="string" @bind-Value="PaymentModel.PaymentMethodId">
                                @foreach (var (card, id) in TestCards.CardMap)
                                {
                                    <InputCheckoutOption Value="id" IdBase="payment">
                                        @FormatHelpers.ShortenCardNumber(card.Number)
                                    </InputCheckoutOption>
                                }
                            </InputCheckoutOptionGroup>
                        </div>
                    </EditForm>
                </ChildContent>
            </CheckoutSection>
        </div>
        <CheckoutSummary/>
        <button class="btn btn--md btn--primary checkout__submit-btn" @onclick="OnSubmitAsync">Submit</button>
    </div>
}

@code {
    private IStore? Store { get; set; }
    private bool ShouldLoadContent { get; set; }
    private CheckoutModel Model { get; set; } = new();
    private PaymentMethodModel PaymentModel { get; set; } = null!;
    private EditContext PaymentMethodEditContext { get; set; } = null!;
    private IModalController? ModalController { get; set; }
    private TimeSlotModel? TimeSlotModel { get; set; }

    protected override void OnInitialized()
    {
        ModalController = ScopedServices.GetService<IModalController>();
        Store = ScopedServices.GetService<IStore>();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Store is not null)
        {
            if (ModalController is not null)
                ModalController.OnChange += Modal_OnChange;

            await RetrieveFulfillmentInfoFromStore();
            PaymentModel = await Store.TryGetValueAsync<PaymentMethodModel>("PaymentInfo")
                           ?? new PaymentMethodModel();
            PaymentMethodEditContext = new EditContext(PaymentModel);
            PaymentMethodEditContext.OnFieldChanged += PaymentMethodEditContext_OnFieldChanged;

            if (Model.FulfillmentInfo is FulfillmentModel.NonEmptyModel nonEmptyModel)
                TimeSlotModel = await Service.GetCheckoutTimeSlotAsync(nonEmptyModel.TimeSlotId);

            ShouldLoadContent = true;
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (!disposing) return;

        if (ModalController is not null)
            ModalController.OnChange -= Modal_OnChange;

        PaymentMethodEditContext.OnFieldChanged -= PaymentMethodEditContext_OnFieldChanged;
    }

    private async Task RetrieveFulfillmentInfoFromStore()
    {
        Model.FulfillmentInfo = await Store!.TryGetValueAsync<FulfillmentModel.DeliveryModel>("FulfillmentData")
                                ?? await Store!.TryGetValueAsync<FulfillmentModel.PickupModel>("FulfillmentData")
                                ?? Model.FulfillmentInfo;
    }

    private async Task OnSubmitAsync()
    {
        try
        {
            await Service.CheckoutAsync(Model.ToSubmitModel());
        }
        catch
        {
            Logger.LogError("An error occured while the user was trying to checkout.");
        }
    }

    private async Task OnFulfillmentActionBtnClicked()
    {
        var options = new ModalOptions
        {
            Title = "Select time",
            Width = "75%",
            Height = "75%"
        };

        var context = await ModalController!.DispatchAsync<FulfillmentModal, AddressModel>(options);

        Logger.LogInformation($"{context.IsVisible}");
    }

    private async void PaymentMethodEditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        Logger.LogInformation("Calling 'Checkout.PaymentMethodEditContext_OnFieldChanged'.");
        PaymentModel = PaymentMethodEditContext.Model as PaymentMethodModel ?? new PaymentMethodModel();
        Model.PaymentMethodId = PaymentModel.PaymentMethodId;
        await Store!.SetValueAsync("PaymentInfo", PaymentModel);
    }

    private async void Modal_OnChange()
    {
        await RetrieveFulfillmentInfoFromStore();
        StateHasChanged();
    }

    private class PaymentMethodModel
    {
        public string? PaymentMethodId { get; set; }
    }

}