@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@if (TabsLoaded)
{
    <div class="tabs">
        <div class="tabs__controls">
            @if (TabIndex.Any())
            {
                @foreach (var (index, tab) in TabIndex)
                {
                    <button class="tabs__control-btn @(CurrentIndex == index ? "tabs__control-btn--active" : string.Empty)"
                            @onclick="() => ChangeTab(index)">
                        @tab.Label
                    </button>
                }
            }
        </div>

        <CascadingValue Value="@(this)">
            @ChildContent
        </CascadingValue>
    </div>
}
else
{
    <div class="tabs">
        <div class="tabs__controls">
            <button class="tabs__control-btn tabs__control-btn--active">
                Loading...
            </button>
        </div>
        <div class="tab-content">
            <CascadingValue Value="@(this)">
                @ChildContent
            </CascadingValue>
        </div>
    </div>
}

@code {
    [Inject] ILogger<Tabs>? Logger { get; set; }

    [Parameter] public string? InitialIndex { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback<string> OnTabLoaded { get; set; }

    [Parameter] public EventCallback<string> OnTabUnloaded { get; set; }

    private Dictionary<string, Tab> TabIndex { get; set; } = new();

    private string? CurrentIndex { get; set; }

    internal bool TabsLoaded { get; private set; }

    private int RenderCount { get; set; } = 0;

    protected override void OnParametersSet()
    {
        RenderCount += 1;
        Logger?.LogInformation($"RenderCount = {RenderCount}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;


        if (InitialIndex is null)
            CurrentIndex = TabIndex.Keys.FirstOrDefault();
        else
        {
            CurrentIndex = TabIndex.Keys.Any(k => k == InitialIndex)
                ? InitialIndex
                : throw new InvalidOperationException(
                    $"There are no registered tabs with the index {InitialIndex}."
                );
        }

        Logger?.LogInformation("First tab loaded: {Index}", CurrentIndex);
        TabsLoaded = TabIndex.Any();
        OnTabLoaded.InvokeAsync(CurrentIndex);
        StateHasChanged();
    }

    protected internal void AddTab(Tab tab)
    {
        TabIndex.TryAdd(tab.Label, tab);
    }

    protected internal bool IsCurrentTab(string index)
    {
        return CurrentIndex == index;
    }

    private async Task ChangeTab(string index)
    {
        if (index == CurrentIndex) return;

        await OnTabUnloaded.InvokeAsync(CurrentIndex);
        await OnTabLoaded.InvokeAsync(index);

        CurrentIndex = index;
        StateHasChanged();
    }

}