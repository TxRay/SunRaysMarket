@using SunRaysMarket.Server.Application.Services.Auth
@using Blazored.FluentValidation
@using SunRaysMarket.Server.Application.Results
@inherits OwningComponentBase
@inject IUserService UserService
@page "/login"

<AppPageTitle>Login</AppPageTitle>

<PageLayout ContentWidth="ContentWidth.PageFull">
    <h2 class="auth__title">Login</h2>

    @switch (_loginResult)
    {
        case AuthResult.AuthNone:
            <div class="login-content">
                <LoginForm OnValidLoginSubmit="model => LoginUserAsync(model)"/>
                <div class="login-content__sample">
                    <h3>Sample Users</h3>
                    <ul>
                        <li>
                            <span>Jack Black</span>
                            <button class="btn btn--pill btn--md btn--info">Fill Form</button>
                        </li>
                        <li>
                            <span>Jain Blaine</span>
                            <button class="btn btn--pill btn--md btn--info">Fill Form</button>
                        </li>
                    </ul>
                </div>
            </div>
            break;
        case AuthResult.AuthFailure resultFailure:
            <NotificationDetails Level="NotificationDetails.NotificationLevel.Error"
                                 Summary="Login Failed"
                                 Message="@resultFailure.Message"/>
            <div class="login-content">
                <LoginForm OnValidLoginSubmit="LoginUserAsync"/>
                <div class="login-content__sample">
                    <h3>Sample Users</h3>
                    <ul>
                        <li>
                            <span>Jack Black</span>
                            <button class="btn btn--pill btn--md btn--info">Fill Form</button>
                        </li>
                        <li>
                            <span>Jain Blaine</span>
                            <button class="btn btn--pill btn--md btn--info">Fill Form</button>
                        </li>
                    </ul>
                </div>
            </div>
            break;
        case AuthResult.AuthSuccess resultSuccess:
            <div class="alert alert--success">
                <p>@resultSuccess.Message</p>
            </div>
            break;
    }
</PageLayout>


@code {
    private AuthResult _loginResult = new AuthResult.AuthNone();
    
    private async Task LoginUserAsync(LoginModel model)
    {
        _loginResult = await UserService.LoginAsync(model);
    }
}

