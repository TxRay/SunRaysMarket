@inherits OwningComponentBase
@attribute [StreamRendering]
@page "/product/details/{id:int}"

<main class="layout__content">
@if (ShouldLoad)
{
    <div class="product-details">
        @if (Product is not null)
        {
            <img src="@Product.PhotoUrl" alt="Product Photo" class="product-details__img">
            <div class="product-details__body">
                <h5 class="product-details__name">@Product.Name</h5>
                <p class="tag product-details__tag">@Product.DepartmentName</p>
                <ProductPrice
                    ClassNames="product-details__price"
                    RegularPrice="@Product.Price"
                    DiscountPercent="@Product.DiscountPercent"/>
                <p class="unit-price product-details__unit-price">
                    @FormatHelpers.ToUnitPriceString(Product.UnitPrice, Product.UnitOfMeasure)
                </p>
                <p class="product-details__description">@Product.Description</p>

                <CartControls CssClasses="product-details__cart-controls"
                              ProductId="@Product.Id"
                              CartItemInfo="@CartItemInfo"/>
            </div>
        }
        else
        {
            <p class="product-details__error">Product not found</p>
        }
    </div>
}
else
{
    <p>Loading...</p>
}
</main>

@code {
    [Parameter] public int Id { get; set; }
    [SupplyParameterFromQuery(Name = "item")] public int? CartItemId { get; set; }

    
    private IProductService ProductService { get; set; } = default!;
    private ICartService CartService { get; set; } = default!;

    private ProductDetailsModel? Product { get; set; }
    private CartItemControlModel? CartItemInfo { get; set; }
    private bool ShouldLoad { get; set; }

    protected override void OnInitialized()
    {
        ProductService = ScopedServices.GetRequiredService<IProductService>();
        CartService = ScopedServices.GetRequiredService<ICartService>();
    }

    protected override async Task OnInitializedAsync()
    {
        Product = await ProductService.GetProductDetailsAsync(Id);
        CartItemInfo = CartItemId is not null
            ? await CartService.GetCartItemInfoAsync(CartItemId.Value)
            : null;

        ShouldLoad = true;
    }

}