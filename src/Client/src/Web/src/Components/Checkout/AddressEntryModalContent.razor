@namespace SunRaysMarket.Client.Web.Components.Checkout
@using SunRaysMarket.Shared.Core.Services
@using SunRaysMarket.Shared.Core.DomainModels
@using SunRaysMarket.Client.Web.Components.Modals
@inherits ModalContentBase<CreateAddressModel>

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<div>
    <EditForm class="form__group" Model="AddressModel" FormName="AddressForm" OnSubmit="@OnValidSubmitAsync">
        <div>
            <label class="form__label form__label--input" for="street">Street</label>
            <InputText class="form__input" @bind-Value="@AddressModel.Street" id="street"/>
        </div>
        <div>
            <label class="form__label form__label--input" for="city">City</label>
            <InputText class="form__input" @bind-Value="@AddressModel.City" id="city"/>
        </div>
        <div>
            <label class="form__label form__label--input" for="state">State</label>
            <InputText class="form__input" @bind-Value="@AddressModel.State" id="state"/>
        </div>
        <div>
            <label class="form__label form__label--input" for="zip">Zip</label>
            <InputText class="form__input" @bind-Value="@AddressModel.PostalCode" id="zip"/>
        </div>
        <div>
            <label class="form__label form__label--input" for="country">Country</label>
            <InputText class="form__input" @bind-Value="@AddressModel.Country" id="country"/>
        </div>
        <button type="submit">Submit</button>
    </EditForm>
</div>

@code {
    [Inject] private ICustomerAddressService CustomerAddressService { get; set; } = null!;

    private CreateAddressModel AddressModel { get; } = new();

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        var options = new ModalOptions
        {
            Width = "75%",
            Height = "75%",
            Title = "Select time"
        };

        var newAddress = editContext.Model as CreateAddressModel;
        var addressId = await CustomerAddressService.AddAddress(newAddress!);

        var tempData = new Dictionary<string, object?>
        {
            { "AddressId", addressId }
        };

        await ChangeModalContent<FulfillmentModal, AddressModel>(options, tempData: tempData);
    }

}