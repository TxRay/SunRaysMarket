@namespace SunRaysMarket.Client.Web.Components.PreferredStore
@using SunRaysMarket.Shared.Core.DomainModels
@inherits OwningComponentBase<SunRaysMarket.Shared.Core.Services.IStoreLocationService>
@rendermode InteractiveWebAssembly

<DisplayByUiState State="_uiState">
    <UiLoaded>
        <div class="store-dropdown" @onmouseenter="@OnMouseEnter" @onmouseleave="@OnMouseLeave">
            <div class="store-btn" id="@StoreBtnId">
                <svg class="store-btn__icon">
                    <use href="/img/icons/solid.svg#store"></use>
                </svg>

                <h6 class="store-btn__heading">
                    Your Store
                </h6>
                <span class="store-btn__location">@SelectedStoreName</span>
                <svg class="store-btn__chevron">
                    <use href="/img/icons/solid.svg#chevron-down"></use>
                </svg>
            </div>

            @{
                var menuTop = _btnHeight > 0 ? $"{_btnHeight}px" : "0";
                var menuMinWidth = _btnWidth > 0 ? $"{_btnWidth}px" : "0";
                var scaleY = _showMenu ? 1 : 0;
                Console.WriteLine(scaleY);
            }

            <div class="store-menu" id="@StoreMenuId"
                 style="--top: @menuTop; --min-width: @menuMinWidth; --scaleY: @scaleY">
                @if (_showMenu)
                {
                    <EditForm EditContext="@StoreLocationEditContext" FormName="storeLocationForm">
                        <InputRadioGroup @bind-Value="StoreLocationModel.SelectedStoreLocationId">
                            <div class="store-menu__list">
                                @foreach (var location in StoreLocations)
                                {
                                    var locationId = $"storeLocation{location.Id}";
                                    <InputRadio class="d-none store-menu__radio" Value="@location.Id" id="@locationId"/>
                                    <label class="store-menu__option" for="@locationId">@location.LocationName</label>
                                }
                            </div>

                        </InputRadioGroup>
                    </EditForm>
                }
            </div>
        </div>
    </UiLoaded>
</DisplayByUiState>

@code {
    private const string StoreBtnId = "storeBtn";
    private const string StoreMenuId = "storeMenu";
    private bool _showMenu;
    private int _btnHeight;
    private int _btnWidth;
    private UiState _uiState = UiState.Loading;

#nullable disable
    [Inject] private ILogger<PreferredStoreSelector> Logger { get; set; }
    [Inject] private IJSRuntime JsRuntime { get; set; }
    private IEnumerable<StoreListModel> StoreLocations { get; set; } = [];

    private DotNetObjectReference<PreferredStoreSelector> Reference { get; set; }
    private SelectedStoreLocationModel StoreLocationModel { get; set; }
    private EditContext StoreLocationEditContext { get; set; }
#nullable enable
    private string? SelectedStoreName =>
        StoreLocations
            .Where(sl => sl.Id == StoreLocationModel.SelectedStoreLocationId)
            .Select(sl => sl.LocationName)
            .FirstOrDefault();

    protected override void OnInitialized()
    {
        StoreLocationModel = new SelectedStoreLocationModel();
        StoreLocationEditContext = new EditContext(StoreLocationModel);
        StoreLocationEditContext.OnFieldChanged += StoreLocationEditContext_OnFieldChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        StoreLocations = await Service.GetStoreLocationsAsync();
        StoreLocationModel.SelectedStoreLocationId = await Service.GetPreferredStoreAsync() ?? default;
        _uiState = UiState.Loaded;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        Reference = DotNetObjectReference.Create(this);

        await JsRuntime!.InvokeVoidAsync(
            "watchElementSize",
            StoreBtnId,
            Reference
        );
    }

    protected override void Dispose(bool disposing)
    {
        if (!disposing) return;
        StoreLocationEditContext.OnFieldChanged -= StoreLocationEditContext_OnFieldChanged;
    }


    private async void StoreLocationEditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        await Service.SetPreferredStoreAsync(StoreLocationModel.SelectedStoreLocationId);
        _showMenu = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void SetHeight(int btnHeight)
    {
        _btnHeight = btnHeight;
    }

    [JSInvokable]
    public void SetWidth(int btnWidth)
    {
        _btnWidth = btnWidth;
    }

    private void OnMouseEnter(MouseEventArgs args)
    {
        _showMenu = true;
        StateHasChanged();
    }

    private void OnMouseLeave(MouseEventArgs args)
    {
        _showMenu = false;
        StateHasChanged();
    }

    private class SelectedStoreLocationModel
    {
        public int SelectedStoreLocationId { get; set; }
    }


}