@using SunRaysMarket.Shared.Core.Services
@using SunRaysMarket.Shared.Core.Utilities
@using SunRaysMarket.Shared.Core.DomainModels
@namespace SunRaysMarket.Client.Web.Components.Cart
@rendermode InteractiveWebAssembly

<DisplayByUiState State="@ComponentUiState">
    <UiLoading>
        <RingSpinner SizeProperty="200px"/>
    </UiLoading>
    <UiLoaded>
        @if (CartItems.Any())
        {
            <section class="cart-item-display">
                @foreach (var item in CartItems)
                {
                    Console.WriteLine(item.ProductPrice);
                    var itemInfo = CartItemInfoList.FirstOrDefault(ci => ci.Id == item.Id);

                    <div class="cart-item">
                        <img src="@item.ProductPhotoUrl" alt="Product photo" class="cart-item__product-img">
                        <h5 class="cart-item__product-name">@item.ProductName</h5>
                        <p class="cart-item__product-price">@FormatHelpers.ToCurrencyString(item.ProductPrice)</p>
                        <CartControls ProductId="@item.ProductId"
                                      CartItemInfo="@itemInfo"
                                      CssClasses="cart-item__product-quantity"
                                      Size="CartControls.ControlsSize.Small"
                                      OnItemDeleted="OnItemRemoved"/>
                    </div>
                }
            </section>

            <div class="cart-page-controls">
                <button class="btn btn--md btn--danger cart-page-controls__empty-btn" @onclick="OnEmptyCartBtnClicked">
                    Empty cart
                </button>
            </div>

            <section class="cart-summary">
                @{
                    var cartSummary = CartItems.GetCartSummary();
                }
                <h4 class="cart-summary__title">Cart Summary</h4>

                @{
                    IReadOnlyDictionary<string, object> cartSummeryDictionary =
                        new Dictionary<string, object>
                        {
                            { "Subtotal", cartSummary.Subtotal },
                            { "Savings", cartSummary.Discount },
                            { "Tax", cartSummary.Tax },
                            { "Total", cartSummary.TotalPrice }
                        };
                }

                <ul class="cart-summary__list">
                    @foreach (var (name, value) in cartSummeryDictionary)
                    {
                        <li class="cart-summary__item">
                            <span>@name:</span>
                            <span>@value</span>
                        </li>
                    }
                </ul>
            </section>
            <NavLink href="/checkout" class="btn btn--md btn--primary cart-btn">Checkout</NavLink>
        }
        else
        {
            <p class="cart__empty">Your cart is empty</p>
        }
    </UiLoaded>
</DisplayByUiState>

@code {
    private ICollection<CartItemListModel> _cartItems = [];
    private ICollection<CartItemControlModel> _cartItemInfoList = [];

#nullable disable
    [Inject] private ICartControlsService CartControlsService { get; set; }
#nullable enable

    [Parameter] public IEnumerable<CartItemListModel> CartItems { get; set; } = [];
    [Parameter] public IEnumerable<CartItemControlModel> CartItemInfoList { get; set; } = [];
    [Parameter] public UiState ComponentUiState { get; set; }


    private void OnItemRemoved(int itemId)
    {
        CartItems = CartItems.Where(ci => ci.Id != itemId);
        CartItemInfoList = CartItemInfoList.Where(ci => ci.Id != itemId);
    }

    private async Task OnEmptyCartBtnClicked()
    {
        await CartControlsService.DeleteCartAsync();
        CartItems = [];
        CartItemInfoList = [];
        StateHasChanged();
    }

}