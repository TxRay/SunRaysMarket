@using SunRaysMarket.Server.Core.DomainModels
@inherits OwningComponentBase
@page "/admin/product-types/{action}/{id:int?}"

<SectionContent SectionName="page-title">@PageTitle</SectionContent>

<EditForm
    Model="ProductType"
    class="form--admin"
    method="post"
    OnValidSubmit="OnValidSubmitAsync"
    FormName="ProductTypeActionForm">
    <div class="form__admin-group">
        <div>
            <InputText class="form__input"
                       placeholder="Enter name of product type"
                       id="name"
                       @bind-Value="@ProductType.Name"/>
            <label for="name" class="form__label form__label--input">Name</label>
        </div>
        <div>
            <InputText class="form__input"
                       placeholder="Enter description of product type"
                       id="description"
                       @bind-Value="@ProductType.Description"/>
            <label for="description" class="form__label form__label--input">Description</label>
        </div>
        <div>
            <InputSelect class="form__select" id="department" @bind-Value="ProductType.DepartmentId">
                <option></option>
                @foreach (var department in Departments)
                {
                    <option value="@department.Id">@department.Name</option>
                }
            </InputSelect>
            <label for="department" class="form__label">Department</label>

        </div>

    </div>
    <div>
        <button type="submit" class="btn btn--primary">
            Submit
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public string Action { get; set; } = default!;
    [Parameter] public int? Id { get; set; }

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    private IUnitOfWork? UnitOfWork { get; set; }

    [SupplyParameterFromForm] private CreateProductTypeModel ProductType { get; } = new();
    private IEnumerable<DepartmentListModel> Departments { get; set; } = new DepartmentListModel[] { };

    private string ActionName { get; } = string.Empty;
    private string PageTitle => $"{ActionName} Product Type";

    protected override async Task OnInitializedAsync()
    {
        UnitOfWork = ScopedServices.GetRequiredService<IUnitOfWork>();
        Departments = await UnitOfWork.DepartmentRepository.GetAllAsync();

        switch (Action, Id.HasValue)
        {
            case ("create", false):
                break;
            case ("edit", true):
                await UnitOfWork!.ProductTypeRepository.GetForEditAsync(Id!.Value);
                break;
            case ("delete", true):
                await DeleteProductTypeAsync();
                Navigation.NavigateTo("admin/product-types");
                break;
            default:
                Navigation.NavigateTo("error/404/not-found");
                break;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (!Id.HasValue)
        {
            await AddProductTypeAsync();

            Navigation.NavigateTo("/admin/product-types");
        }
        else
        {
            await UpdateProductTypeAsync();
        }
    }

    private async Task AddProductTypeAsync()
    {
        await UnitOfWork!.ProductTypeRepository.CreateAsync(ProductType);
        await UnitOfWork!.SaveChangesAsync();
    }

    private async Task UpdateProductTypeAsync()
    {
        var productType = new UpdateProductTypeModel
        {
            Id = Id!.Value,
            DepartmentId = ProductType.DepartmentId,
            Name = ProductType.Name
        };

        await UnitOfWork!.ProductTypeRepository.UpdateAsync(productType);
        await UnitOfWork!.SaveChangesAsync();
    }

    private async Task DeleteProductTypeAsync()
    {
        await UnitOfWork!.ProductTypeRepository.DeleteAsync(Id!.Value);
        await UnitOfWork!.SaveChangesAsync();
    }

}