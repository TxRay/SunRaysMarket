@using Application.DomainModels.Payment
@using Application.DomainModels.Checkout
<WizardStep Name="payment-info">
    <EditForm EditContext="@EditContext">
        <div>
            <label for="card-number">Card Number</label>
            <InputText id="card-number" @bind-Value="@Model.CardNumber"/>
        </div>
        <div>
            <label for="expiry">Expiration Date</label>
            <InputText id="expiry" @bind-Value="@Model.Expiry"/>
        </div>
        <div>
            <label for="cvv">CCV</label>
            <InputText id="cvv" @bind-Value="@Model.Cvv"/>
        </div>
        <div>
            <label for="name">Cardholder Name</label>
            <InputText id="name" @bind-Value="@Model.Name"/>
        </div>
    </EditForm>
</WizardStep>

@code {

    [CascadingParameter]
    IStore? Store { get; set; }

    private EditContext? EditContext { get; set; }
    private PaymentInfoModel Model { get; set; } = new();

    protected override void OnInitialized()
    {
        if (Store is null)
            throw new InvalidOperationException("No store was provided.");
        Store.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        Model = await Store!.TryGetValueAsync<PaymentInfoModel>("payment-info-step") ?? new PaymentInfoModel();
        EditContext = new EditContext(Model);
        EditContext.OnFieldChanged += HandleFieldChanged;
    }

    private async void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        Model = EditContext!.Model as PaymentInfoModel ?? new PaymentInfoModel();
        await Store!.SetValueAsync("payment-info-step", Model);
    }

}