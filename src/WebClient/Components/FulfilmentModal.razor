@using WebClient.State
@using Application.Enums
@using Application.Services
@using Application.DomainModels
@using WebClient.Models
@inherits ModalContentBase<FulfillmentModel>

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if (TabsComponentShouldLoad)
{
    <Tabs InitialIndex="@InitialTabIndex"
          OnTabLoaded="OnTabLoaded"
          OnTabUnloaded="OnTabUnloaded">
        <Tab Label="Pickup">
            @if (PickupModel is not null & PickupTimeSlots.Any())
            {
                <CheckoutSection>
                    <Heading>Select pickup time</Heading>
                    <ChildContent>
                        <EditForm EditContext="@PickupContext" FormName="PickupTimeSlotsForm">
                            <InputRadioGroup @bind-Value="PickupModel!.SelectedTimeSlotId">
                                @foreach (var timeSlot in PickupTimeSlots)
                                {
                                    <div class="timeslot">
                                        <InputRadio Value="timeSlot.Id"/>
                                        <label>@timeSlot.TimeSlotDefinition.ToString()</label>
                                    </div>
                                }
                            </InputRadioGroup>
                        </EditForm>
                    </ChildContent>
                </CheckoutSection>
            }
        </Tab>
        <Tab Label="Delivery">
            @if (DeliveryModel is not null && DeliveryTimeSlots.Any())
            {
                <CheckoutSection>
                    <Heading>Select delivery time </Heading>
                    <ChildContent>
                        <EditForm EditContext="@DeliveryContext" FormName="DeliveryTimeSlotsForm">
                            <InputRadioGroup @bind-Value="DeliveryModel!.SelectedTimeSlotId">
                                @foreach (var timeSlot in DeliveryTimeSlots)
                                {
                                    <div class="timeslot">
                                        <InputRadio Value="timeSlot.Id"/>
                                        <label>@timeSlot.TimeSlotDefinition.ToString()</label>
                                    </div>
                                }
                            </InputRadioGroup>
                        </EditForm>
                    </ChildContent>
                </CheckoutSection>

                <CheckoutSection OnActionButtonClicked="@OnAddAddressBtnClicked">
                    <Heading>Select address</Heading>
                    <ActionButton>Add new address</ActionButton>
                    <ChildContent>
                        @if (CustomerAddresses.Any())
                        {
                            <EditForm EditContext="@CustomerAddressContext" FormName="DeliveryAddressForm">
                                <InputRadioGroup @bind-Value="CustomerAddressModel!.SelectedAddressId">
                                    @foreach (var address in CustomerAddresses)
                                    {
                                        <div>
                                            <InputRadio Value="@address.Id"/>
                                            <label>@address.Street</label>
                                        </div>
                                    }
                                </InputRadioGroup>
                            </EditForm>
                        }
                        else
                        {
                            <p>No addresses available.</p>
                        }
                    </ChildContent>
                </CheckoutSection>
            }
        </Tab>
    </Tabs>
}


@code {
    [Inject] private ILogger<FulfilmentModal>? Logger { get; set; }
    [Inject] private ICheckoutService Service { get; set; } = default!;
    [Inject] private IStore Store { get; set; } = default!;
    [Inject] private ICustomerAddressService CustomerAddressService { get; set; } = null!;

    [Parameter] public EventCallback<FulfillmentModel> OnStateChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private bool TabsComponentShouldLoad { get; set; } = false;
    private string? InitialTabIndex { get; set; }
    private FulfillmentModel Model { get; set; } = new();
    private IEnumerable<TimeSlotListModel> DeliveryTimeSlots { get; set; } = [];
    private IEnumerable<TimeSlotListModel> PickupTimeSlots { get; set; } = [];
    private IEnumerable<AddressModel> CustomerAddresses { get; set; } = [];
    private TimeSlotModel? DeliveryModel { get; set; }
    private TimeSlotModel? PickupModel { get; set; }
    private SelectAddressModel? CustomerAddressModel { get; set; }
    private EditContext DeliveryContext { get; set; } = null!;
    private EditContext PickupContext { get; set; } = null!;
    private EditContext CustomerAddressContext { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Logger?.LogInformation("FulfillmentModal.OnInitializedAsync called.");

        var model = await Store.TryGetValueAsync<FulfillmentModel>(StoreKey);
        InitialTabIndex = model?.OrderType is not null
            ? Enum.GetName(typeof(OrderType), model.OrderType)
            : null;
        
        TabsComponentShouldLoad = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        StateHasChanged();
    }

    protected override Task OnUnloadedAsync()
        => StoreModel();

    private async Task OnAddAddressBtnClicked()
    {
        var options = new ModalOptions
        {
            Width = "75%",
            Height = "75%"
        };

        await ChangeModalContent<AddressEntryModalContent, CreateAddressModel>(options);
    }
    
    private const string StoreKey = "FulfillmentData";
    private Task StoreModel() => Store.SetValueAsync(StoreKey, Model);

    private async Task RetrieveModelFromStore()
    {
        Model = await Store.TryGetValueAsync<FulfillmentModel>(StoreKey) ?? Model;
    }

    private async Task OnTabLoaded(string label)
    {
        await RetrieveModelFromStore();

        switch (label)
        {
            case "Delivery":
                await OnTabLoaded_Delivery();
                break;
            case "Pickup":
                await OnTabLoaded_Pickup();
                break;
        }
    }

    private async Task OnTabLoaded_Delivery()
    {
        DeliveryTimeSlots = await Service.GetCheckoutTimeSlotsAsync(2, OrderType.Delivery);

        DeliveryModel = DeliveryTimeSlots.Any(dts => dts.Id == Model.TimeSlotId)
            ? new TimeSlotModel
            {
                SelectedTimeSlotId = Model.TimeSlotId!.Value
            }
            : new TimeSlotModel();
        
        if (ModalContext.TempData.TryGetValue("AddressId", out var aId) && aId is int newAddressId)
        {
            Model = Model with { DeliveryAddressId = newAddressId };
            ModalContext.TempData.Remove("AddressId");
            await StoreModel();
        }

        DeliveryContext = new EditContext(DeliveryModel);
        DeliveryContext.OnFieldChanged += DeliveryContext_OnFieldChanged;

        CustomerAddressModel = Model.DeliveryAddressId > 0
            ? new SelectAddressModel
            {
                SelectedAddressId = Model.DeliveryAddressId.Value
            }
            : new SelectAddressModel();

        CustomerAddressContext = new EditContext(CustomerAddressModel);
        CustomerAddressContext.OnFieldChanged += CustomerAddressContext__OnFieldChanged;

        CustomerAddresses = await CustomerAddressService.GetAddressesAsync();
    }

    private async Task OnTabLoaded_Pickup()
    {
        PickupTimeSlots = await Service.GetCheckoutTimeSlotsAsync(2, OrderType.Pickup);

        PickupModel = PickupTimeSlots.Any(pts => pts.Id == Model.TimeSlotId)
            ? new TimeSlotModel
            {
                SelectedTimeSlotId = Model.TimeSlotId!.Value
            }
            : new TimeSlotModel();

        PickupContext = new EditContext(PickupModel);
        PickupContext.OnFieldChanged += PickupContext_OnFieldChanged;
    }

    private async Task OnTabUnloaded(string label)
    {
        switch (label)
        {
            case "Delivery":
                CustomerAddressContext.OnFieldChanged -= CustomerAddressContext__OnFieldChanged;
                DeliveryContext.OnFieldChanged -= DeliveryContext_OnFieldChanged;
                break;
            case "Pickup":
                PickupContext.OnFieldChanged -= PickupContext_OnFieldChanged;
                break;
        }

        await StoreModel();
    }

    private async void PickupContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        PickupModel = PickupContext.Model as TimeSlotModel;
        Model = new FulfillmentModel
        {
            OrderType = OrderType.Pickup, 
            TimeSlotId = PickupModel?.SelectedTimeSlotId, 
            DeliveryAddressId = null
        };
        await StoreModel();
    }

    private async void DeliveryContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        DeliveryModel = DeliveryContext.Model as TimeSlotModel;
        Model = Model with
        {
            OrderType = OrderType.Delivery,
            TimeSlotId = DeliveryModel?.SelectedTimeSlotId
        };
        await StoreModel();
    }

    private async void CustomerAddressContext__OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        CustomerAddressModel = CustomerAddressContext.Model as SelectAddressModel;
        Model = Model with { DeliveryAddressId = CustomerAddressModel?.SelectedAddressId };
        await StoreModel();
    }

    private async void HandleStateChange()
    {
        if (OnStateChanged.HasDelegate)
            await OnStateChanged.InvokeAsync(ModalContext.State);

        StateHasChanged();
    }

    private record TimeSlotModel
    {
        public int SelectedTimeSlotId { get; set; }
    }

    private record SelectAddressModel
    {
        public int SelectedAddressId { get; set; }
    }

}