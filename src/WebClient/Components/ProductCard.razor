@using Application.DomainModels
@using Application.Utilities
@using WebClient.Enums
@using WebClient.State
@inject IServiceProvider ServiceProvider

@rendermode InteractiveAuto


<a class="product-card">
    <CardScreen OnClick="@OnCardScreenClicked"/>
    <img class="product-card__img"
         src="@Product.PhotoUrl"
         alt=""
         id="@($"productCardImage{Product.Id}")"/>
    <h5 class="product-card__product-name "
        id="@($"productCardHeading{Product.Id}")">
        @Product.Name
    </h5>
    <ProductPrice
        ClassNames="product-card__price"
        RegularPrice="@Product.Price"
        DiscountPercent="Product.DiscountPercent"
        SalePriceOrientation="SalePriceDisplayOrientation.Column"/>
    <span class="unit-price product-card__unit-price">@Product.</span>
    <span class="tag product-card__tag">@Product.DepartmentName</span>
    <CartControls CssClasses="product-card__cart-controls"
                  ProductId="@Product.Id"
                  CartItemInfo="@CartItemInfo"/>
</a>

@code {
    [Parameter] public ProductListModel Product { get; set; } = null!;

    [Parameter] public IEnumerable<CartItemControlModel> CartItemInfoList { get; set; } 
        = new List<CartItemControlModel>();
    
    private ProductModalState? ModalState { get; set; }

    protected override void OnParametersSet()
    {
        ModalState ??= ServiceProvider.GetService<ProductModalState>();
    }

    private void OnCardScreenClicked()
    {
        Console.WriteLine("OnCardScreenClicked");
        ModalState?.SetState(Product.Id, true);
    }

    private CartItemControlModel? CartItemInfo 
        => CartItemInfoList.FirstOrDefault(cartItemInfo => cartItemInfo.ProductId == Product.Id);

}