@using Microsoft.AspNetCore.Components.Sections
@using WebClient.State
@rendermode InteractiveAuto
@inject IServiceProvider ServiceProvider

@if (ShowModal)
{
    <div id="modal" class="modal">
        <div id="modalBody" class="modal__body" style="--width: @Width; --height: @Height;">
            <h3 class="modal__title">@Title</h3>
            <button id="modalCloseBtn" class="modal__close" @onclick="OnCloseClicked">
                &times;
            </button>
            <div id="modalContent" class="modal__content">
                @ChildContent
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public string? Title { get; set; }
    [Parameter, EditorRequired] public string Width { get; set; } = null!;
    [Parameter, EditorRequired] public string Height { get; set; } = null!;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnCloseClicked { get; set; }
    [Parameter] public IModalState? State { get; set; }

    private bool ShowModal => State?.ShowModal ?? false;
    
    protected override void OnParametersSet()
    {
        State ??= ServiceProvider.GetService<ProductModalState>();
        
        if (State is not null)
            State.OnChange += StateHasChanged;
        
    }
    

    private void OnCloseBtnClicked()
    {
        if (OnCloseClicked.HasDelegate)
            OnCloseClicked.InvokeAsync();
    }


}