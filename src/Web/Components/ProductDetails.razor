@using Application.DomainModels
@using Application.Utilities
<Modal ContentClasses="product-details">
    @if (Product is not null)
    {
        <img src="@Product.PhotoUrl" alt="Product Photo" class="product-details__img">
        <ModalCloseButton CssClasses="product-details__close"/>
        <div class="product-details__body">
            <h5 class="product-details__name">@Product.Name</h5>
            <p class="tag product-details__tag">@Product.DepartmentName</p>
            <p class="price product-details__price">
                @if (Product.DiscountPercent == 0)
                {
                    <span class="price__amount--regular">@Product.Price.ToCurrencyString()</span>
                }
                else
                {
                    <span class="price__amount--sale">@Product.SalePrice.ToCurrencyString()</span>
                    <span class="price__amount--regular-strike">@Product.Price.ToCurrencyString()</span>
                }
            </p>
            <p class="product-details__unit-price">@Product.UnitPrice.ToUnitPriceString(Product.UnitOfMeasure)</p>
            <p class="product-details__description">@Product.Description</p>
 
                <CartControls CssClasses="product-details__cart-controls" IdSuffix="@IdSuffix" ProductId="@Product.Id"/>
        </div>
    }
    else
    {
        <button class="product-details__close">&times;</button>
        <p class="product-details__error">Product not found</p>
    }
</Modal>

@code {

    [Parameter]
    public string? IdSuffix { get; set; }

    [Parameter]
    public ProductDetailsModel? Product { get; set; }

}

