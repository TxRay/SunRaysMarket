@using Application.UnitOfWork
@using Application.DomainModels
@using Microsoft.AspNetCore.Components.Endpoints.DependencyInjection
@inherits OwningComponentBase
@page "/admin/products/{action}/{id:int?}"

<SectionContent SectionName="page-title">@PageTitle</SectionContent>

<EditForm Model="Model" class="form--admin" method="post" OnInvalidSubmit="OnValidSubmitAsync">
    <div class="form__admin-group">

        <div>
            <InputText class="form__input"
                       placeholder="Enter product name"
                       id="name"
                       @bind-Value="Model.Product.Name"/>
            <label for="name" class="form__label form__label--input">Name</label>

        </div>
        <div>
            <InputText class="form__input"
                       placeholder="Enter product description"
                       id="description"
                       @bind-Value="Model.Product.Description"/>
            <label for="description" class="form__label form__label--input">Description</label>

        </div>
        <div>
            <InputFile
                class="form__input"
                placeholder="Upload a product photo"
                id="photoFile"
                @bind-Value="Model.Image"/>
            <input type="hidden" id="photoUrl">
            <label for="photoFile" class="form__label form__label--input">ProductPhoto</label>
        </div>
        <div>
            <InputNumber class="form__input"
                         placeholder="Price = $0.00"
                         id="price"
                         @bind-Value="@Model.Product.Price"/>
            <label for="price" class="form__label form__label--input">Price</label>
        </div>
        <div>
            <InputNumber class="form__input"
                         placeholder="Discount = 0%"
                         id="discount"
                         @bind-Value="Model.Product.DiscountPercent"/>
            <label for="discount" class="form__label form__label--input">Discount</label>
        </div>
        <div>
            <InputNumber class="form__input"
                         placeholder="Enter the measure"
                         id="measure"
                         TValue="float"
                         @bind-Value="@Model.Product.Measure"/>
            <label for="measure" class="form__label form__label--input">Discount</label>
        </div>
    </div>

    <div class="form__admin-group">
        <div>
            <InputSelect class="form__select"
                         id="unitOfMeasurement"
                         @bind-Value="@Model.Product.UnitOfMeasureId">
                @foreach (var unitOfMeasure in UnitsOfMeasure)
                {
                    <option value="@unitOfMeasure.Id">@unitOfMeasure.Name</option>
                }
            </InputSelect>
            <label for="unitOfMeasurement" class="form__label">Unit of Measure</label>
        </div>
        <div>
            <InputSelect class="form__select"
                         id="productType"
                         @bind-Value="@Model.Product.ProductTypeId">
                @foreach (var productType in ProductTypes)
                {
                    <option value="@productType.Id">@productType.Name</option>
                }
            </InputSelect>
            <label for="productType" class="form__label">Unit of Measure</label>
        </div>
    </div>

    <div>
        <button type="submit" class="btn btn--primary">
            Submit
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public string Action { get; set; } = null!;
    [Parameter] public int? Id { get; set; }

    private IUnitOfWork? UnitOfWork { get; set; }
    [Inject] private NavigationManager? NavManager { get; set; }

    private ProductModel Model { get; set; } = new();
    private IEnumerable<UnitOfMeasureListModel> UnitsOfMeasure { get; set; } = new List<UnitOfMeasureListModel>();
    private IEnumerable<ProductTypeDetailsModel> ProductTypes { get; set; } = new List<ProductTypeDetailsModel>();

    private string ActionName { get; set; } = string.Empty;
    private string PageTitle => $"{ActionName} Product";

    protected override void OnInitialized()
    {
        UnitOfWork = ScopedServices.GetRequiredService<IUnitOfWork>();
    }

    protected override async Task OnInitializedAsync()
    {
        UnitsOfMeasure = await UnitOfWork!.UnitOfMeasureRepository.GetAllAsync();

        switch (Action, Id.HasValue)
        {
            case ("create", false):
                ActionName = "Create";
                break;
            case ("edit", true):
                ActionName = "Edit";
                Model.Product = await UnitOfWork!.ProductRepository.GetForEditAsync(Id!.Value)
                                ?? new CreateProductModel();
                break;
            case ("delete", true):
                await DeleteProductAsync();
                NavManager!.NavigateTo("admin/products");
                break;
            default:
                NavManager!.NavigateTo("error/404/not-found");
                break;
        }
    }

    private class ProductModel
    {
        public FormFile? Image { get; set; }
        public CreateProductModel Product { get; set; } = new();
    }

    private async Task OnValidSubmitAsync()
    {
        if (Id.HasValue)
            await AddProductAsync();
        else
            await UpdateProductAsync();
    }

    private async Task<string> AddImageAsync()
    {
        if (Model.Image is null) return string.Empty;

        var imageIdentifier = await UnitOfWork!.ImageRepository.UploadAsync(Model.Image);
        await UnitOfWork!.SaveChangesAsync();

        return await UnitOfWork!.ImageRepository.GetUrlAsync(Guid.Parse(imageIdentifier)) ?? string.Empty;
    }

    private async Task AddProductAsync()
    {
        Model.Product.PhotoUrl = await AddImageAsync();
        await UnitOfWork!.ProductRepository.CreateAsync(Model.Product);
        await UnitOfWork!.SaveChangesAsync();
    }

    private async Task UpdateProductAsync()
    {
        var photoUrl = await AddImageAsync();
        var product = new UpdateProductModel
        {
            Id = Id!.Value,
            Name = Model.Product.Name,
            Description = Model.Product.Description,
            DiscountPercent = Model.Product.DiscountPercent,
            Measure = Model.Product.DiscountPercent,
            PhotoUrl = photoUrl,
            Price = Model.Product.Price,
            ProductTypeId = Model.Product.ProductTypeId,
            UnitOfMeasureId = Model.Product.UnitOfMeasureId
        };

        await UnitOfWork!.ProductRepository.UpdateAsync(product);
        await UnitOfWork!.SaveChangesAsync();
    }

    private async Task DeleteProductAsync()
    {
        await UnitOfWork!.ProductRepository.DeleteAsync(Id!.Value);
        await UnitOfWork!.SaveChangesAsync();
    }

}