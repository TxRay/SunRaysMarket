@using Application.DomainModels
@using Application.UnitOfWork
@using System.Buffers.Text
@inject IUnitOfWork UnitOfWork

<div class="@CssClasses"
     id="cartControls-@_uniqueIdSuffix"
     data-product-id="@ProductId.ToString()"
     data-cart-id="@CartId.ToString()"
     data-cart-item-id="@CartItemInfo?.Id.ToString()">

    <button class="btn btn--primary btn--md @(ShowAddToCartButton ? string.Empty : "product-details__btn--hidden")"
            id="addToCartBtn-@_uniqueIdSuffix">
        Add to Cart
    </button>
    <div class="cart-controls @(ShowAddToCartButton ? string.Empty : "cart-controls--visible")" 
         id="quantityControls-@_uniqueIdSuffix">
        <div class="quantity">
            <button class="quantity__btn" id="decrementQuantityBtn-@_uniqueIdSuffix">
                <svg class="quantity__icon">
                    <use href="/img/icons/solid.svg#minus"></use>
                </svg>
            </button>
            <input type="number"
                   class="quantity__input"
                   value="@CartItemInfo?.Quantity"
                   id="cartControlQuantity-@_uniqueIdSuffix">
            <button class="quantity__btn" id="incrementQuantityBtn-@_uniqueIdSuffix">
                <svg class="quantity__icon">
                    <use href="/img/icons/solid.svg#plus"></use>
                </svg>
            </button>
        </div>
        <button class="cart-controls__remove-btn" id="removeFromCartBtn-@_uniqueIdSuffix">
            <svg class="cart-controls__remove-icon">
                <use href="/img/icons/solid.svg#trash"></use>
            </svg>
        </button>
    </div>
</div>

<script>
@InitJsCallMarkUpString
</script>


@code {

    [CascadingParameter]
    private int? CartId { get; set; }

    [Parameter]
    public CartItemControlModel? CartItemInfo { get; set; } 

    [Parameter]
    public string CssClasses { get; set; } = string.Empty;

    [Parameter]
    public int ProductId { get; set; }


    private readonly string _uniqueIdSuffix = Convert.ToBase64String(Guid.NewGuid().ToByteArray());
    
    private bool ShowAddToCartButton => CartItemInfo is null;

    private MarkupString InitJsCallMarkUpString => new MarkupString($"initializeCartControls('{_uniqueIdSuffix}');");
    

    /*private async Task OnAddToCartClick()
    {
        ShowAddToCartButton = false;
        CartItemInfo = new CartItemControlModel
        {
            Quantity = 1
        };
    }
    
    private async Task OnRemoveFromCartClick()
    {
        ShowAddToCartButton = true;
        CartItemInfo = null;
    }
    
    private async Task  OnQuantityChange(ChangeEventArgs e)
    {
        if(CartItemInfo is not null && int.TryParse(e.Value.ToString(), out var quantity))
            CartItemInfo.Quantity = quantity;
    }
    
    private async Task OnDecrementQuantityClick()
    {
        if(CartItemInfo is not null && CartItemInfo.Quantity > 1)
            CartItemInfo.Quantity--;
    }
    
    private async Task OnIncrementQuantityClick()
    {
        if(CartItemInfo is not null)
            CartItemInfo.Quantity++;
    }*/
}